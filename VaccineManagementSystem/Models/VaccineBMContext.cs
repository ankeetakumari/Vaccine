// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace VaccineManagementSystem.Models;

public partial class VaccineBMContext : DbContext
{
    public VaccineBMContext()
    {
    }

    public VaccineBMContext(DbContextOptions<VaccineBMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admintbl> Admintbls { get; set; }

    public virtual DbSet<CommonVaccinetbl> CommonVaccinetbls { get; set; }

    public virtual DbSet<FamilyMembersTbl> FamilyMembersTbls { get; set; }

    public virtual DbSet<FeedbackTbl> FeedbackTbls { get; set; }

    public virtual DbSet<UserTbl> UserTbls { get; set; }

    public virtual DbSet<VaccinationCertificate> VaccinationCertificates { get; set; }

    public virtual DbSet<VaccineHistory> VaccineHistories { get; set; }

    public virtual DbSet<VaccineSlotsTbl> VaccineSlotsTbls { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=WKSPUN05GTR1040;Initial Catalog=VaccineBM;Integrated Security=True;Trustservercertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admintbl>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__admintbl__719FE4E8B7CA7CB2");

            entity.ToTable("admintbl");

            entity.Property(e => e.AdminId).HasColumnName("AdminID");
            entity.Property(e => e.AdminName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.Phonenum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CommonVaccinetbl>(entity =>
        {
            entity.HasKey(e => e.VaccineId).HasName("PK__commonVa__C1ED3DD5BBD63D3A");

            entity.ToTable("commonVaccinetbl");

            entity.Property(e => e.VaccineId).HasColumnName("vaccineID");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("companyName");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.VaccineDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VaccineImg)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VaccineName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vaccineName");
        });

        modelBuilder.Entity<FamilyMembersTbl>(entity =>
        {
            entity.HasKey(e => e.MId).HasName("PK__FamilyMe__7CB211D1A621BAD6");

            entity.ToTable("FamilyMembersTbl");

            entity.Property(e => e.MId).HasColumnName("m_ID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MAadhaarNum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("m_aadhaarNum");
            entity.Property(e => e.MDob).HasColumnName("m_Dob");
            entity.Property(e => e.MName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("m_Name");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Relation)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.User).WithMany(p => p.FamilyMembersTbls)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__FamilyMem__UserI__49C3F6B7");
        });

        modelBuilder.Entity<FeedbackTbl>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__feedback__2613FD242D024C50");

            entity.ToTable("feedbackTbl");

            entity.Property(e => e.FeedbackId).HasColumnName("feedbackId");
            entity.Property(e => e.Message)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("message");
            entity.Property(e => e.UserId).HasColumnName("userID");

            entity.HasOne(d => d.User).WithMany(p => p.FeedbackTbls)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__feedbackT__userI__1332DBDC");
        });

        modelBuilder.Entity<UserTbl>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__UserTbl__CB9A1CDF2F34DCAB");

            entity.ToTable("UserTbl");

            entity.Property(e => e.UserId).HasColumnName("userID");
            entity.Property(e => e.AadhaarNum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("aadhaarNum");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.CaptchaResponse)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("userName");
        });

        modelBuilder.Entity<VaccinationCertificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Vaccinat__3214EC0783F402FA");

            entity.Property(e => e.CertificateUrl).HasMaxLength(255);

            entity.HasOne(d => d.FamilyMember).WithMany(p => p.VaccinationCertificates)
                .HasForeignKey(d => d.FamilyMemberId)
                .HasConstraintName("FK__Vaccinati__Famil__02FC7413");

            entity.HasOne(d => d.User).WithMany(p => p.VaccinationCertificates)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Vaccinati__UserI__02084FDA");

            entity.HasOne(d => d.VaccineSlot).WithMany(p => p.VaccinationCertificates)
                .HasForeignKey(d => d.VaccineSlotId)
                .HasConstraintName("FK__Vaccinati__Vacci__03F0984C");
        });

        modelBuilder.Entity<VaccineHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VaccineH__3214EC07E4578C15");

            entity.ToTable("VaccineHistory");

            entity.Property(e => e.VaccineDate).HasColumnType("datetime");

            entity.HasOne(d => d.FamilyMember).WithMany(p => p.VaccineHistories)
                .HasForeignKey(d => d.FamilyMemberId)
                .HasConstraintName("FK__VaccineHi__Famil__0A9D95DB");

            entity.HasOne(d => d.User).WithMany(p => p.VaccineHistories)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__VaccineHi__UserI__09A971A2");

            entity.HasOne(d => d.VaccineSlot).WithMany(p => p.VaccineHistories)
                .HasForeignKey(d => d.VaccineSlotId)
                .HasConstraintName("FK__VaccineHi__Vacci__0B91BA14");
        });

        modelBuilder.Entity<VaccineSlotsTbl>(entity =>
        {
            entity.HasKey(e => e.SId).HasName("PK__VaccineS__2F3DA3DCBAD1131C");

            entity.ToTable("VaccineSlotsTbl");

            entity.Property(e => e.SId).HasColumnName("s_Id");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BookedByUser).WithMany(p => p.VaccineSlotsTbls)
                .HasForeignKey(d => d.BookedByUserId)
                .HasConstraintName("FK__VaccineSl__Booke__7E37BEF6");

            entity.HasOne(d => d.BookedForFamilyMember).WithMany(p => p.VaccineSlotsTbls)
                .HasForeignKey(d => d.BookedForFamilyMemberId)
                .HasConstraintName("FK__VaccineSl__Booke__7F2BE32F");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}